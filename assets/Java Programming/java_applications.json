{
  "result": [
    {
      "topic": "java_applications",
      "questions": [
        {
          "question": "Which Java API is primarily used for building desktop Graphical User Interfaces (GUIs)?",
          "options": {
            "A": "JDBC",
            "B": "JMS",
            "C": "Swing (or AWT/JavaFX)",
            "D": "JAX-RS"
          },
          "correct_answer": "C",
          "explanation": "**Swing** (part of Java Foundation Classes - JFC) and **JavaFX** are the primary APIs provided by Java for creating rich desktop graphical user interfaces. AWT (Abstract Window Toolkit) is an older, more basic GUI toolkit."
        },
        {
          "question": "Which Swing component is typically used as the top-level container for a desktop application window?",
          "options": {
            "A": "JButton",
            "B": "JPanel",
            "C": "JFrame",
            "D": "JLabel"
          },
          "correct_answer": "C",
          "explanation": "A **`JFrame`** is a top-level window with a title and a border. It is the fundamental building block for desktop applications built with Swing, acting as the main application window that can contain other Swing components."
        },
        {
          "question": "In Swing, which interface must be implemented to handle events from a `JButton` (e.g., a button click)?",
          "options": {
            "A": "MouseListener",
            "B": "KeyListener",
            "C": "ActionListener",
            "D": "EventListener"
          },
          "correct_answer": "C",
          "explanation": "The **`ActionListener`** interface is used to handle action events generated by components like `JButton`, `JTextField` (when Enter is pressed), and `JMenuItem`. Its `actionPerformed()` method is invoked when the action occurs."
        },
        {
          "question": "What is a Java Servlet?",
          "options": {
            "A": "A client-side program that runs in a web browser.",
            "B": "A small Java program that extends the capabilities of a web server.",
            "C": "A component used for connecting to databases.",
            "D": "A utility for parsing XML files."
          },
          "correct_answer": "B",
          "explanation": "A **Servlet** is a small Java program that extends the capabilities of a web server. Servlets are primarily used to process requests from web clients (like browsers), generate dynamic web content, and respond to clients."
        },
        {
          "question": "Which method of a Servlet is called only once, during the servlet's initialization?",
          "options": {
            "A": "service()",
            "B": "doGet()",
            "C": "init()",
            "D": "destroy()"
          },
          "correct_answer": "C",
          "explanation": "The **`init()`** method of a Servlet is called only once by the servlet container when the servlet is first loaded. It's used for one-time initialization tasks, such as setting up database connections or loading configuration."
        },
        {
          "question": "What does JSP stand for?",
          "options": {
            "A": "Java Service Pages",
            "B": "Java Standard Protocols",
            "C": "Java Server Pages",
            "D": "Java System Programming"
          },
          "correct_answer": "C",
          "explanation": "**JSP** stands for **Java Server Pages**. It's a technology that allows developers to create dynamic web content by embedding Java code directly into HTML-like pages."
        },
        {
          "question": "What is the primary difference in role between a Servlet and a JSP?",
          "options": {
            "A": "Servlets are for presentation, JSPs are for business logic.",
            "B": "Servlets are Java code embedded in HTML; JSPs are HTML embedded in Java code.",
            "C": "Servlets are primarily for request processing and business logic; JSPs are primarily for generating dynamic web content (presentation layer).",
            "D": "Servlets run on the client-side; JSPs run on the server-side."
          },
          "correct_answer": "C",
          "explanation": "Traditionally, **Servlets** handle HTTP requests, perform business logic, and act as controllers. **JSPs** are designed for the presentation layer, making it easier to create the HTML output for web pages by embedding small Java snippets. Both execute on the server-side."
        },
        {
          "question": "Which build automation tool uses an XML file named `pom.xml` for project configuration?",
          "options": {
            "A": "Ant",
            "B": "Gradle",
            "C": "Maven",
            "D": "NPM"
          },
          "correct_answer": "C",
          "explanation": "**Maven** is a popular build automation tool that uses an XML file called **`pom.xml` (Project Object Model)** to describe the project, its dependencies, build lifecycle, and plugins."
        },
        {
          "question": "What is the purpose of the `pom.xml` file in a Maven project?",
          "options": {
            "A": "It defines the project's database schema.",
            "B": "It specifies the user interface layout.",
            "C": "It describes the project's configuration, dependencies, and how it should be built.",
            "D": "It contains the application's runtime log messages."
          },
          "correct_answer": "C",
          "explanation": "The `pom.xml` file is the core of a Maven project. It's an XML file that contains information about the project and configuration details used by Maven to build the project. This includes project metadata, dependencies, build plugins, and project structure."
        },
        {
          "question": "Which build automation tool uses a Groovy or Kotlin DSL (Domain-Specific Language) for its build scripts?",
          "options": {
            "A": "Ant",
            "B": "Maven",
            "C": "Gradle",
            "D": "Make"
          },
          "correct_answer": "C",
          "explanation": "**Gradle** is a build automation tool that is known for its flexibility and performance. Unlike Maven's XML, Gradle uses a **Groovy or Kotlin DSL** for writing its build scripts (`build.gradle` or `build.gradle.kts`), which offers more programmatic power and readability."
        },
        {
          "question": "In the context of web applications, what is the role of a 'Servlet Container' (e.g., Apache Tomcat)?",
          "options": {
            "A": "To provide persistent storage for web application data.",
            "B": "To manage the lifecycle of Servlets and JSPs, handle requests, and provide runtime environment.",
            "C": "To translate Java code into HTML for web browsers.",
            "D": "To secure web applications against cyber threats."
          },
          "correct_answer": "B",
          "explanation": "A **Servlet Container** (also known as a web container, like Apache Tomcat or Jetty) is responsible for managing the lifecycle of Servlets and JSPs, mapping URLs to servlets, handling HTTP requests, and providing the runtime environment required for web applications."
        },
        {
          "question": "What is the file extension for a standard Java archive file containing compiled Java classes and resources?",
          "options": {
            "A": ".zip",
            "B": ".exe",
            "C": ".jar",
            "D": ".war"
          },
          "correct_answer": "C",
          "explanation": "A **JAR (Java Archive)** file is a package file format used to aggregate many Java class files, associated metadata, and resources (text, images, etc.) into a single file for distribution."
        },
        {
          "question": "Which type of archive file is specifically used to package web applications (Servlets, JSPs, HTML, CSS, JavaScript) for deployment on a servlet container?",
          "options": {
            "A": ".jar",
            "B": ".ear",
            "C": ".war",
            "D": ".zip"
          },
          "correct_answer": "C",
          "explanation": "A **WAR (Web Application Archive)** file is a specialized JAR file that contains all the necessary components for a web application, including servlets, JSPs, HTML, CSS, JavaScript, and associated libraries, organized in a specific directory structure for deployment to a web server/servlet container."
        },
        {
          "question": "In a Swing application, how would you typically retrieve the text entered by a user into a `JTextField`?",
          "options": {
            "A": "`textField.getValue()`",
            "B": "`textField.getText()`",
            "C": "`textField.readText()`",
            "D": "`textField.getString()`"
          },
          "correct_answer": "B",
          "explanation": "The `JTextField` class (and other text components like `JTextArea`) provides the **`getText()`** method to retrieve the current text content entered by the user."
        },
        {
          "question": "What does MVC stand for in the context of web application architecture?",
          "options": {
            "A": "My View Controller",
            "B": "Model-View-Controller",
            "C": "Managed Virtual Component",
            "D": "Modular Versatile Code"
          },
          "correct_answer": "B",
          "explanation": "**MVC (Model-View-Controller)** is a widely used architectural pattern for developing user interfaces that divides an application into three interconnected components: the Model (data/business logic), the View (user interface), and the Controller (handles user input and updates model/view)."
        },
        {
          "question": "Which of the following is an example of an `ActionListener` implementation for a `JButton`?",
          "options": {
            "A": "new ActionListener() { void onClick() { ... } }",
            "B": "new ActionAdapter() { public void actionPerformed(ActionEvent e) { ... } }",
            "C": "new MyButtonListener() { public void buttonClicked() { ... } }",
            "D": "new ActionListener() { public void actionPerformed(ActionEvent e) { ... } }"
          },
          "correct_answer": "D",
          "explanation": "The `ActionListener` interface has a single method: `public void actionPerformed(ActionEvent e)`. When implementing it (often anonymously or with a lambda expression), you provide the code for this method. Option D correctly shows the anonymous inner class syntax for implementing it."
        },
        {
          "question": "What is the typical sequence of a web request being handled by a Servlet in a web application?",
          "options": {
            "A": "Browser -> Servlet -> Web Server -> Response",
            "B": "Browser -> Web Server -> Servlet Container -> Servlet -> Response",
            "C": "Web Server -> Servlet Container -> Browser -> Servlet -> Response",
            "D": "Servlet Container -> Servlet -> Browser -> Web Server -> Response"
          },
          "correct_answer": "B",
          "explanation": "The typical flow is: 1. A client (Browser) sends an HTTP request. 2. The **Web Server** receives it. 3. The Web Server forwards the request to the appropriate **Servlet Container**. 4. The Servlet Container dispatches the request to the correct **Servlet**. 5. The Servlet processes the request and generates a response. 6. The Servlet Container sends the response back to the Web Server, which then sends it to the Browser."
        },
        {
          "question": "In a Maven `pom.xml`, where would you declare external libraries that your project depends on?",
          "options": {
            "A": "<build> section",
            "B": "<plugins> section",
            "C": "<dependencies> section",
            "D": "<properties> section"
          },
          "correct_answer": "C",
          "explanation": "In Maven's `pom.xml`, the **`<dependencies>` section** is used to declare all the external libraries (JARs) that your project requires to compile and run. Maven automatically downloads and manages these dependencies."
        },
        {
          "question": "Which `HttpServlet` method is responsible for handling HTTP GET requests?",
          "options": {
            "A": "doPost()",
            "B": "doPut()",
            "C": "doGet()",
            "D": "service()"
          },
          "correct_answer": "C",
          "explanation": "The `HttpServlet` class provides specific methods for handling different HTTP request methods. The **`doGet()`** method is overridden by developers to handle HTTP GET requests, while `doPost()` handles POST requests, etc. The `service()` method dispatches to these specific `do*` methods."
        },
        {
          "question": "What is an EAR file in Java enterprise applications?",
          "options": {
            "A": "A file for storing environment variables.",
            "B": "A deployment unit for a single web application.",
            "C": "An Enterprise Archive file, used to package multiple modules (JARs, WARs) into a single deployable unit for an application server.",
            "D": "A file containing audio recordings for an application."
          },
          "correct_answer": "C",
          "explanation": "An **EAR (Enterprise Archive)** file is a JAR file that packages one or more modules (such as WAR files for web applications, JAR files for EJB modules or utility classes, and resource adapters) into a single deployable unit for Java EE application servers (like WildFly, GlassFish, WebSphere)."
        }
      ]
    }
  ]
}
