{
  "result": [
    {
      "topic": "functions",
      "questions": [
        {
          "question": "What is the correct way to define a function in Python?",
          "options": {
            "A": "function myFunction()",
            "B": "def myFunction():",
            "C": "define myFunction():",
            "D": "func myFunction():"
          },
          "correct_answer": "B",
          "explanation": "Python uses the `def` keyword followed by the function name, parentheses (for parameters), and a colon to define a function."
        },
        {
          "question": "Which keyword is used to return a value from a function?",
          "options": {
            "A": "return",
            "B": "yield",
            "C": "output",
            "D": "result"
          },
          "correct_answer": "A",
          "explanation": "The `return` keyword is used to send a value back from a function to the caller. It also terminates the function's execution."
        },
        {
          "question": "How do you call a function named 'myFunction'?",
          "options": {
            "A": "call myFunction()",
            "B": "myFunction()",
            "C": "execute myFunction()",
            "D": "invoke myFunction()"
          },
          "correct_answer": "B",
          "explanation": "To call or execute a function in Python, you simply write its name followed by parentheses `()`. If it takes arguments, they go inside the parentheses."
        },
        {
          "question": "What will be the output of the following code?\n\ndef add(a, b):\n    return a + b\nprint(add(2, 3))",
          "options": {
            "A": "2",
            "B": "3",
            "C": "5",
            "D": "None"
          },
          "correct_answer": "C",
          "explanation": "The `add` function takes two arguments, `a` and `b`, and returns their sum. When called with `2` and `3`, it returns `5`, which is then printed."
        },
        {
          "question": "What is the default return value of a function that does not explicitly return anything?",
          "options": {
            "A": "None",
            "B": "0",
            "C": "False",
            "D": "Error"
          },
          "correct_answer": "A",
          "explanation": "If a Python function does not have a `return` statement, or if it has a `return` statement without an explicit value, it implicitly returns `None`."
        },
        {
          "question": "Which of the following can be used to pass a variable number of arguments to a function?",
          "options": {
            "A": "*args",
            "B": "**kwargs",
            "C": "Both A and B",
            "D": "None of the above"
          },
          "correct_answer": "C",
          "explanation": "`*args` (arbitrary arguments) allows a function to accept a variable number of non-keyword (positional) arguments, while `**kwargs` (arbitrary keyword arguments) allows it to accept a variable number of keyword arguments."
        },
        {
          "question": "What is the purpose of the 'global' keyword in a function?",
          "options": {
            "A": "To define a global variable",
            "B": "To modify a global variable inside a function",
            "C": "To create a new global function",
            "D": "To declare a variable as global"
          },
          "correct_answer": "B",
          "explanation": "The `global` keyword is used inside a function to indicate that a variable being assigned to is a global variable, not a local one. This allows the function to modify a global variable's value."
        },
        {
          "question": "What is a recursive function?",
          "options": {
            "A": "A function that calls itself",
            "B": "A function that is defined outside another function",
            "C": "A function that has no parameters",
            "D": "A function that uses global variables"
          },
          "correct_answer": "A",
          "explanation": "A recursive function is a function that solves a problem by calling itself as a subroutine, usually with a smaller instance of the same problem, until a base case is reached."
        },
        {
          "question": "What will happen if a recursive function does not have a base case?",
          "options": {
            "A": "It will run indefinitely and cause a stack overflow",
            "B": "It will execute only once",
            "C": "It will return None",
            "D": "It will raise an error"
          },
          "correct_answer": "A",
          "explanation": "A base case is crucial for a recursive function to stop. Without it, the function will call itself infinitely, leading to an excessive number of function calls on the call stack, eventually resulting in a `RecursionError` (often referred to as a stack overflow)."
        },
        {
          "question": "Which of the following best describes 'scope' in Python?",
          "options": {
            "A": "The amount of memory a variable uses",
            "B": "The region of the program where a variable can be accessed",
            "C": "The type of variable being used",
            "D": "The function where the variable is defined"
          },
          "correct_answer": "B",
          "explanation": "Scope refers to the accessibility of variables and other named entities within a program. It defines where a variable can be referenced or modified. Python uses a concept called LEGB (Local, Enclosing, Global, Built-in) for scope resolution."
        },
        {
          "question": "What will the following code print?\n\ndef myFunc():\n    x = 10\nmyFunc()\nprint(x)",
          "options": {
            "A": "10",
            "B": "Error",
            "C": "None",
            "D": "0"
          },
          "correct_answer": "B",
          "explanation": "The variable `x` is defined inside `myFunc()`, making it a local variable. It is not accessible outside the function's scope. Attempting to `print(x)` after the function call will result in a `NameError`."
        },
        {
          "question": "What is the difference between positional arguments and keyword arguments?",
          "options": {
            "A": "Positional arguments must be specified in order, while keyword arguments can be specified out of order.",
            "B": "Positional arguments can be omitted, while keyword arguments cannot.",
            "C": "There is no difference.",
            "D": "Positional arguments can only be integers, while keyword arguments can be strings."
          },
          "correct_answer": "A",
          "explanation": "Positional arguments are matched to parameters based on their order in the function call. Keyword arguments are identified by their parameter name, allowing them to be passed in any order after positional arguments."
        },
        {
          "question": "What is the output of the following code?\n\ndef func(x):\n    return x * 2\nresult = func(5)\nprint(result)",
          "options": {
            "A": "2",
            "B": "5",
            "C": "10",
            "D": "None"
          },
          "correct_answer": "C",
          "explanation": "The function `func` takes `x` and returns `x` multiplied by 2. When `func(5)` is called, `x` is 5, so it returns `5 * 2 = 10`. This value is assigned to `result` and then printed."
        },
        {
          "question": "How can you define a function with default parameters?",
          "options": {
            "A": "def myFunc(a=1):",
            "B": "def myFunc(a): a = 1",
            "C": "def myFunc(a): a.default(1)",
            "D": "def myFunc(a: 1):"
          },
          "correct_answer": "A",
          "explanation": "Default parameters are defined by assigning a default value to the parameter in the function definition (e.g., `parameter_name=default_value`). If the caller does not provide a value for that parameter, the default value is used."
        },
        {
          "question": "What will be the output of the following code?\n\ndef multiply(a, b=2):\n    return a * b\nprint(multiply(3))",
          "options": {
            "A": "3",
            "B": "5",
            "C": "6",
            "D": "None"
          },
          "correct_answer": "C",
          "explanation": "The `multiply` function has a default value of `2` for `b`. When `multiply(3)` is called, `a` becomes `3` and `b` uses its default value of `2`. The function then returns `3 * 2 = 6`."
        },
        {
          "question": "Which of the following is true about lambda functions?",
          "options": {
            "A": "They can have multiple statements",
            "B": "They can take any number of arguments but can only have one expression",
            "C": "They are defined using the def keyword",
            "D": "They are named functions"
          },
          "correct_answer": "B",
          "explanation": "Lambda functions (anonymous functions) in Python are small, single-expression functions. They are defined using the `lambda` keyword and can take any number of arguments but are limited to a single expression. They don't use the `def` keyword and are unnamed."
        },
        {
          "question": "What will the output of the following code be?\n\ndef func():\n    return 'Hello'\nprint(func())",
          "options": {
            "A": "Hello",
            "B": "'Hello'",
            "C": "None",
            "D": "Error"
          },
          "correct_answer": "A",
          "explanation": "The `func()` function returns the string `'Hello'`. The `print()` function then displays this string to the console without the surrounding quotes."
        }
      ]
    }
  ]
}
