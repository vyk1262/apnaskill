{
  "result": [
    {
      "topic": "Docker_Storage_and_Volumes",
      "questions": [
        {
          "question": "What happens to data written inside a container's writable layer when the container is removed?",
          "options": {
            "A": "It is automatically backed up to the host.",
            "B": "It is persisted and available if a new container is started from the same image.",
            "C": "It is lost permanently.",
            "D": "It is pushed to Docker Hub."
          },
          "correct_answer": "C",
          "explanation": "By default, any data written directly into a container's writable layer (the top layer of its filesystem) is ephemeral. If you remove the container (`docker rm`), that data is lost forever. This is why Docker provides mechanisms for persistent storage."
        },
        {
          "question": "What is the primary purpose of a Docker Volume?",
          "options": {
            "A": "To increase the CPU allocated to a container.",
            "B": "To ensure persistent data storage for containers, independent of the container's lifecycle.",
            "C": "To manage network connectivity for containers.",
            "D": "To store Docker images."
          },
          "correct_answer": "B",
          "explanation": "Docker Volumes are the preferred mechanism for persisting data generated by and used by Docker containers. They are managed by Docker and are independent of the container's lifecycle, meaning data in a volume persists even if the container is removed."
        },
        {
          "question": "Which command is used to create a named Docker volume?",
          "options": {
            "A": "`docker volume add my_data`",
            "B": "`docker create volume my_data`",
            "C": "`docker volume create my_data`",
            "D": "`docker new volume my_data`"
          },
          "correct_answer": "C",
          "explanation": "The `docker volume create` command is used to create a new named volume. Named volumes are often preferred because they are managed by Docker and easier to back up or migrate."
        },
        {
          "question": "How do you mount a named volume to a container?",
          "options": {
            "A": "Using the `-v <volume_name>:<container_path>` flag with `docker run`.",
            "B": "Using the `--mount type=volume,source=<volume_name>,target=<container_path>` flag with `docker run`.",
            "C": "Both A and B are correct.",
            "D": "By adding `VOLUME` instruction in Dockerfile only."
          },
          "correct_answer": "C",
          "explanation": "Both the short syntax (`-v`) and the long syntax (`--mount`) can be used to mount named volumes. The `--mount` syntax is generally recommended for clarity and readability, especially for more complex mounts."
        },
        {
          "question": "What is a 'bind mount' in Docker storage?",
          "options": {
            "A": "A special type of volume that is encrypted.",
            "B": "A way to directly map a file or directory from the host machine into a container.",
            "C": "A volume that is automatically deleted when the container stops.",
            "D": "A network-attached storage solution for Docker."
          },
          "correct_answer": "B",
          "explanation": "Bind mounts allow you to directly mount a file or directory from the host machine's filesystem into a container. This gives the container direct access to a specific path on the host, which is useful for development (e.g., live code editing) or sharing configuration files."
        },
        {
          "question": "What is the primary difference between Docker Volumes and Bind Mounts?",
          "options": {
            "A": "Volumes are ephemeral, Bind Mounts are persistent.",
            "B": "Volumes are managed by Docker, Bind Mounts are directly linked to host filesystem paths and not managed by Docker.",
            "C": "Bind Mounts are cross-platform, Volumes are Linux-specific.",
            "D": "Volumes are used for code, Bind Mounts for data."
          },
          "correct_answer": "B",
          "explanation": "The key distinction is management. Docker Volumes are fully managed by Docker (stored in a Docker-managed part of the filesystem), offering better portability and features like volume drivers. Bind Mounts rely on the host's exact directory structure, are not managed by Docker, and can have security implications if not used carefully due to host path exposure."
        },
        {
          "question": "When might you prefer to use a bind mount over a Docker volume?",
          "options": {
            "A": "When you need to store database data persistently.",
            "B": "When developing an application and needing to rapidly iterate on code changes without rebuilding the image.",
            "C": "When deploying applications to production.",
            "D": "When you need to store logs that are automatically deleted after a week."
          },
          "correct_answer": "B",
          "explanation": "Bind mounts are extremely useful in development workflows. By mounting your local source code directory into the container, any changes you make to the code on your host machine are immediately reflected inside the running container, allowing for rapid development and testing without needing to rebuild the image."
        },
        {
          "question": "What is a 'tmpfs mount' in Docker storage?",
          "options": {
            "A": "A read-only mount for static files.",
            "B": "A temporary mount that stores data in the host's memory, not on disk.",
            "C": "A network filesystem mount for shared data.",
            "D": "A volume with a fixed size limit."
          },
          "correct_answer": "B",
          "explanation": "A `tmpfs` mount is a temporary filesystem that resides in the host's memory (RAM). Data written to a `tmpfs` mount is never written to the host's disk. It is volatile and will be lost when the container stops or the host reboots. Useful for temporary, non-persistent data like session files or caches."
        },
        {
          "question": "Which command lists all Docker volumes on the host?",
          "options": {
            "A": "`docker ls volumes`",
            "B": "`docker volume show`",
            "C": "`docker volume ls`",
            "D": "`docker volumes`"
          },
          "correct_answer": "C",
          "explanation": "The `docker volume ls` command displays a list of all volumes managed by Docker on the local host, showing their names and drivers."
        },
        {
          "question": "How do you remove a Docker volume?",
          "options": {
            "A": "`docker volume rm <volume_name>`",
            "B": "`docker rm <volume_name>`",
            "C": "`docker rmi <volume_name>`",
            "D": "Volumes are automatically removed with containers."
          },
          "correct_answer": "A",
          "explanation": "Named volumes are independent of containers and must be explicitly removed using `docker volume rm <volume_name>`. If a volume is still in use by a container, you'll need to remove the container first or use the `-f` flag to force removal (though forcing is generally discouraged)."
        },
        {
          "question": "What is the purpose of the `VOLUME` instruction in a Dockerfile?",
          "options": {
            "A": "To declare a directory as an externally mounted volume, but it does not create the volume.",
            "B": "To copy data from the host into the image.",
            "C": "To create a named volume when the image is built.",
            "D": "To delete all existing volumes."
          },
          "correct_answer": "A",
          "explanation": "The `VOLUME` instruction in a Dockerfile declares a specific path inside the container as a mount point for an external volume. When a container is started from this image, Docker will ensure that this path is backed by a volume (either an anonymous volume or a named volume if explicitly mounted), preventing data in this path from being lost when the container is removed. It doesn't create the volume, but sets up the *expectation* of a volume."
        },
        {
          "question": "Can data in a Docker volume be shared between multiple containers?",
          "options": {
            "A": "No, each volume is exclusive to one container.",
            "B": "Yes, multiple containers can mount and share the same volume.",
            "C": "Only if the containers are on the same network.",
            "D": "Only if the containers are running the same image."
          },
          "correct_answer": "B",
          "explanation": "Yes, a significant benefit of Docker volumes is their ability to be shared. Multiple containers can mount the same named volume (or bind mount), allowing them to share and access the same persistent data. This is crucial for microservices architectures where different services might need to access common data."
        },
        {
          "question": "Which of the following describes an 'anonymous volume'?",
          "options": {
            "A": "A volume that has a specific, user-defined name.",
            "B": "A volume that is created by Docker automatically and managed by its ID, without a human-readable name.",
            "C": "A volume that is deleted immediately after the container stops.",
            "D": "A volume that requires network access."
          },
          "correct_answer": "B",
          "explanation": "Anonymous volumes are created by Docker when you use the `-v /path/in/container` syntax without specifying a host path or volume name. Docker assigns them a long, random ID. They persist as long as no containers are using them, but are harder to manage and clean up than named volumes."
        },
        {
          "question": "What is the purpose of `docker volume prune`?",
          "options": {
            "A": "To remove all running containers with volumes.",
            "B": "To remove all unused (dangling) Docker volumes.",
            "C": "To backup all existing Docker volumes.",
            "D": "To inspect the contents of a volume."
          },
          "correct_answer": "B",
          "explanation": "The `docker volume prune` command removes all unused volumes. Unused (or 'dangling') volumes are those that are not currently mounted by any running container, helping to reclaim disk space."
        },
        {
          "question": "If you use a bind mount, and the source path on the host does not exist, what happens by default when the container starts?",
          "options": {
            "A": "The container will fail to start.",
            "B": "Docker will create the directory on the host machine.",
            "C": "The bind mount will be skipped, and the container will run normally.",
            "D": "An error message will be logged, but the container will start."
          },
          "correct_answer": "B",
          "explanation": "If the source directory for a bind mount does not exist on the host, Docker will automatically create it for you. This can sometimes lead to unexpected behavior if there's a typo in the path."
        },
        {
          "question": "Can you mount a volume as read-only to a container?",
          "options": {
            "A": "No, volumes are always writable by default.",
            "B": "Yes, by adding `:ro` to the mount definition (e.g., `-v my_volume:/app:ro`).",
            "C": "Only if the volume is a `tmpfs` mount.",
            "D": "Only if specified in the Dockerfile."
          },
          "correct_answer": "B",
          "explanation": "Yes, you can specify that a volume or bind mount should be mounted as read-only within the container by appending `:ro` (read-only) to the mount specification. This is a good security practice for applications that don't need to write to certain data."
        },
        {
          "question": "Where are Docker volumes stored on the host machine by default?",
          "options": {
            "A": "In the user's home directory.",
            "B": "In `/tmp`.",
            "C": "Within the Docker daemon's data directory, typically `/var/lib/docker/volumes/`.",
            "D": "In a cloud storage bucket."
          },
          "correct_answer": "C",
          "explanation": "Docker manages the storage location for named volumes. By default, they are created and stored within the Docker daemon's data directory, usually at `/var/lib/docker/volumes/` on Linux systems. This location is not meant for direct user interaction."
        },
        {
          "question": "What is the benefit of using a volume driver for Docker volumes?",
          "options": {
            "A": "It makes volumes smaller on disk.",
            "B": "It allows volumes to be stored on remote hosts or cloud storage, providing advanced features like backups and replication.",
            "C": "It encrypts the data stored in the volume.",
            "D": "It automatically cleans up unused volumes."
          },
          "correct_answer": "B",
          "explanation": "Volume drivers (plugins) extend Docker's volume capabilities. They enable storing volumes on remote hosts, cloud providers (e.g., AWS EBS, Azure Disk), or other storage systems, offering features like data replication, snapshots, and centralized management that are not available with local volumes or bind mounts."
        },
        {
          "question": "When should you NOT use a bind mount?",
          "options": {
            "A": "When developing applications.",
            "B": "When you need to persist configuration files.",
            "C": "When your application writes sensitive data to a non-persistent location.",
            "D": "When you want to share data across multiple containers on different hosts."
          },
          "correct_answer": "D",
          "explanation": "Bind mounts are inherently tied to the local host's filesystem. They are not suitable for sharing data between containers running on *different* Docker hosts. For multi-host data sharing, you would need distributed storage solutions like network filesystems or Docker volume drivers that support remote storage."
        },
        {
          "question": "What is the primary difference in syntax between `-v` and `--mount` for volume mounting?",
          "options": {
            "A": "`-v` is for volumes, `--mount` is for bind mounts.",
            "B": "`-v` is older and less verbose, `--mount` is newer, more explicit, and supports more options.",
            "C": "`-v` is for anonymous volumes, `--mount` is for named volumes.",
            "D": "There is no functional difference, only preference."
          },
          "correct_answer": "B",
          "explanation": "While both `-v` and `--mount` can be used for both volumes and bind mounts, `--mount` is the newer, more explicit syntax introduced with Docker 17.06. It separates options (type, source, target) with commas, making it more readable and allowing for more complex options (like driver-specific options) than the more condensed `-v` syntax. For new developments, `--mount` is generally preferred."
        }
      ]
    }
  ]
}
