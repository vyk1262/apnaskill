{
  "result": [
    {
      "topic": "javascript_web_apis",
      "questions": [
        {
          "question": "What is the purpose of the Fetch API in JavaScript?",
          "options": {
            "A": "To make HTTP requests to servers",
            "B": "To manipulate web storage",
            "C": "To handle background tasks",
            "D": "To work with geolocation data"
          },
          "correct_answer": "A",
          "explanation": "The Fetch API provides a modern and flexible way to make network requests (like HTTP requests) to retrieve resources from servers, similar to XMLHttpRequest but with a more powerful and flexible feature set."
        },
        {
          "question": "Which API allows you to store key-value pairs in a web browser?",
          "options": {
            "A": "Web Storage API",
            "B": "Web Fetch API",
            "C": "Web Worker API",
            "D": "Web Geolocation API"
          },
          "correct_answer": "A",
          "explanation": "The Web Storage API (which includes `localStorage` and `sessionStorage`) allows web applications to store key-value pairs locally within the user's browser, providing a way to retain data across browser sessions or tabs."
        },
        {
          "question": "What does the Geolocation API allow you to do?",
          "options": {
            "A": "Retrieve the user's current location",
            "B": "Store user preferences",
            "C": "Manage web page history",
            "D": "Fetch data from a server"
          },
          "correct_answer": "A",
          "explanation": "The Geolocation API allows a web application to obtain the user's current geographical location with their permission, typically using GPS, Wi-Fi, or cellular network data."
        },
        {
          "question": "What is a key feature of the Web Worker API?",
          "options": {
            "A": "It allows for multi-threaded programming",
            "B": "It provides a way to store data on the server",
            "C": "It handles HTTP requests",
            "D": "It manipulates the DOM"
          },
          "correct_answer": "A",
          "explanation": "The Web Worker API enables web applications to run scripts in background threads, separate from the main execution thread of the browser. This allows long-running or computationally intensive tasks to be performed without blocking the user interface."
        },
        {
          "question": "Which of the following methods is used to retrieve data from local storage?",
          "options": {
            "A": "localStorage.getItem(key)",
            "B": "localStorage.retrieve(key)",
            "C": "localStorage.fetch(key)",
            "D": "localStorage.load(key)"
          },
          "correct_answer": "A",
          "explanation": "The `localStorage.getItem(key)` method is used to retrieve the value associated with a specified key from the `localStorage` object."
        },
        {
          "question": "What is the primary function of the Web History API?",
          "options": {
            "A": "To manipulate the browser's session history",
            "B": "To fetch remote data",
            "C": "To create background threads",
            "D": "To manage cookies"
          },
          "correct_answer": "A",
          "explanation": "The Web History API allows web applications to interact with the browser's session history, enabling actions like navigating back and forth through the history and manipulating the URL without a full page reload."
        },
        {
          "question": "Which method of the Fetch API initiates a request to a specified URL?",
          "options": {
            "A": "fetch(url)",
            "B": "request(url)",
            "C": "get(url)",
            "D": "send(url)"
          },
          "correct_answer": "A",
          "explanation": "The `fetch()` function is the primary entry point for using the Fetch API. It takes a URL as its first argument and returns a Promise that resolves to a `Response` object."
        },
        {
          "question": "How can you access the response from a Fetch API request?",
          "options": {
            "A": "Using .then() to handle the Promise",
            "B": "Using .response() method directly",
            "C": "By storing it in a variable",
            "D": "Using the async/await syntax only"
          },
          "correct_answer": "A",
          "explanation": "The Fetch API returns a Promise. To handle the successful resolution of this Promise and access the response data, you typically use the `.then()` method (or `await` keyword in an `async` function) to process the `Response` object."
        },
        {
          "question": "What data format is commonly used when working with the Fetch API?",
          "options": {
            "A": "JSON",
            "B": "XML",
            "C": "HTML",
            "D": "Plain text"
          },
          "correct_answer": "A",
          "explanation": "JSON (JavaScript Object Notation) is a lightweight data-interchange format that is widely used for data exchange between web browsers and servers due to its readability and ease of parsing in JavaScript."
        },
        {
          "question": "What is the function of the Web Forms API?",
          "options": {
            "A": "To facilitate the creation and management of web forms",
            "B": "To store form data in the browser",
            "C": "To handle background processes for forms",
            "D": "To validate user input"
          },
          "correct_answer": "A",
          "explanation": "The Web Forms API (a collection of HTML elements and JavaScript interfaces) provides functionalities for creating, validating, and submitting interactive forms on the web. While it includes validation, its primary function is broader, covering the entire form creation and management process."
        }
      ]
    }
  ]
}
